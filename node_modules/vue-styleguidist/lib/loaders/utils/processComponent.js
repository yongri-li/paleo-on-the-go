"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = processComponent;

var _vueTemplateCompiler = require("vue-template-compiler");

var fs = _interopRequireWildcard(require("fs"));

var path = _interopRequireWildcard(require("path"));

var _getNameFromFilePath = _interopRequireDefault(require("react-styleguidist/lib/loaders/utils/getNameFromFilePath"));

var _requireIt = _interopRequireDefault(require("react-styleguidist/lib/loaders/utils/requireIt"));

var _slugger = _interopRequireDefault(require("react-styleguidist/lib/loaders/utils/slugger"));

var vueDocLoader = path.resolve(__dirname, '../vuedoc-loader.js');
/**
 * References the filepath of the metadata file.
 *
 * @param {string} filepath
 * @returns {object}
 */

function getComponentMetadataPath(filepath) {
  var ext = path.extname(filepath);
  return filepath.substring(0, filepath.length - ext.length) + '.json';
}
/**
 * Return an object with all required for style guide information for a given component.
 *
 * @param {string} filepath
 * @param {object} config
 * @returns {object}
 */


function processComponent(filepath, config, subComponentPaths, ignoreExample) {
  var componentPath = path.relative(config.configDir || '', filepath);
  var componentName = (0, _getNameFromFilePath["default"])(filepath);
  var props = (0, _requireIt["default"])("!!".concat(vueDocLoader).concat(ignoreExample ? '?noExample=1' : '', "!").concat(filepath));
  var examplesFile = config.getExampleFilename(filepath);
  var componentMetadataPath = getComponentMetadataPath(filepath);
  var hasExamplesFile = examplesFile && fs.existsSync(examplesFile);
  var hasInternalExamples = false;

  if (!hasExamplesFile && fs.existsSync(filepath)) {
    var customBlocks = (0, _vueTemplateCompiler.parseComponent)(fs.readFileSync(filepath, 'utf8')).customBlocks;
    hasInternalExamples = !!customBlocks && customBlocks.findIndex(function (p) {
      return p.type === 'docs';
    }) >= 0;
  }

  var hasExamples = hasExamplesFile || hasInternalExamples;
  var subComponents = subComponentPaths && subComponentPaths.length ? subComponentPaths.map(function (subFilePath) {
    return processComponent(subFilePath, config, undefined, true);
  }) : undefined;
  return {
    filepath: componentPath,
    slug: _slugger["default"].slug(componentName),
    pathLine: config.getComponentPathLine(componentPath),
    module: (0, _requireIt["default"])(filepath),
    props: props,
    hasExamples: hasExamples,
    metadata: fs.existsSync(componentMetadataPath) ? (0, _requireIt["default"])(componentMetadataPath) : {},
    subComponents: subComponents
  };
}