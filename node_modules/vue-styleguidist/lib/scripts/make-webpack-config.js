"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = _default;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var path = _interopRequireWildcard(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _terserWebpackPlugin = _interopRequireDefault(require("terser-webpack-plugin"));

var _cleanWebpackPlugin = require("clean-webpack-plugin");

var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));

var _miniHtmlWebpackPlugin = _interopRequireDefault(require("mini-html-webpack-plugin"));

var _miniHtmlWebpackTemplate = _interopRequireDefault(require("@vxna/mini-html-webpack-template"));

var _webpackMerge = _interopRequireDefault(require("webpack-merge"));

var _forEach = _interopRequireDefault(require("lodash/forEach"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _makeWebpackConfig = _interopRequireDefault(require("react-styleguidist/lib/scripts/make-webpack-config"));

var _StyleguidistOptionsPlugin = _interopRequireDefault(require("react-styleguidist/lib/scripts/utils/StyleguidistOptionsPlugin"));

var _mergeWebpackConfig = _interopRequireDefault(require("./utils/mergeWebpackConfig"));

var RENDERER_REGEXP = /Renderer$/;
var sourceDir = path.resolve(__dirname, '../client');

function _default(config, env) {
  process.env.NODE_ENV = process.env.NODE_ENV || env;
  var isProd = env === 'production';
  var template = (0, _isFunction["default"])(config.template) ? config.template : _miniHtmlWebpackTemplate["default"];
  var templateContext = (0, _isFunction["default"])(config.template) ? {} : config.template;
  var htmlPluginOptions = {
    context: Object.assign({}, templateContext, {
      title: config.title,
      container: config.mountPointId,
      trimWhitespace: true
    }),
    template: template
  };
  var webpackConfig = {
    output: {
      path: config.styleguideDir,
      filename: 'build/[name].bundle.js',
      chunkFilename: 'build/[name].js'
    },
    resolve: {
      extensions: ['.vue', '.js', '.jsx', '.json'],
      alias: {
        'rsg-codemirror-theme.css': "codemirror/theme/".concat(config.editorConfig.theme.split(' ')[0], ".css")
      }
    },
    module: {
      rules: [{
        resourceQuery: /blockType=docs/,
        loader: require.resolve('../loaders/docs-loader.js')
      }]
    },
    performance: {
      hints: false
    }
  };
  webpackConfig.mode = env;

  if (config.webpackConfig) {
    webpackConfig = (0, _mergeWebpackConfig["default"])(webpackConfig, config.webpackConfig, env);
  }

  webpackConfig = (0, _webpackMerge["default"])(webpackConfig, {
    // we need to follow our own entry point
    entry: config.require.concat([path.resolve(sourceDir, 'index')]),
    resolve: {
      alias: {
        // allows to use the compiler
        // without this, cli will overload the alias and use runtime esm
        vue$: require.resolve('vue/dist/vue.esm.js')
      }
    },
    plugins: [// in order to avoid collision with the preload plugins
    // that are loaded by the vue cli
    // we have to load these plugins last
    new _StyleguidistOptionsPlugin["default"](config), new _miniHtmlWebpackPlugin["default"](htmlPluginOptions), new _webpack["default"].DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
      'process.env.STYLEGUIDIST_ENV': JSON.stringify(env)
    })]
  }); // To have the hot-reload work on vue-styleguide
  // the HMR has to be loaded after the html plugin.
  // Hence this piece added last to the list of plugins.

  if (isProd) {
    var optimization = config.minimize ? {
      minimizer: [new _terserWebpackPlugin["default"]({
        parallel: true,
        cache: true,
        terserOptions: {
          ie8: false,
          ecma: 5,
          compress: {
            keep_fnames: true,
            warnings: false,

            /**
             * Disable reduce_funcs to keep Terser from inlining
             * Preact's VNode. If enabled, the 'new VNode()' is replaced
             * with a anonymous 'function(){}', which is problematic for
             * preact-compat, since it extends the VNode prototype to
             * accomodate React's API.
             */
            reduce_funcs: false
          },
          mangle: {
            keep_fnames: true
          }
        }
      })]
    } : {
      minimize: false
    };
    webpackConfig = (0, _webpackMerge["default"])(webpackConfig, {
      output: {
        filename: 'build/bundle.[chunkhash:8].js',
        chunkFilename: 'build/[name].[chunkhash:8].js',
        publicPath: config.styleguidePublicPath
      },
      plugins: [new _cleanWebpackPlugin.CleanWebpackPlugin({
        verbose: config.verbose === true
      })].concat((0, _toConsumableArray2["default"])(config.assetsDir ? [new _copyWebpackPlugin["default"]([{
        from: config.assetsDir
      }])] : [])),
      optimization: optimization
    });
  } else {
    webpackConfig = (0, _webpackMerge["default"])({
      output: {
        publicPath: config.styleguidePublicPath
      },
      devServer: {
        publicPath: config.styleguidePublicPath
      },
      plugins: [new _webpack["default"].HotModuleReplacementPlugin()],
      entry: [require.resolve('react-dev-utils/webpackHotDevClient')]
    }, webpackConfig);
  }

  var RSG_COMPONENTS_ALIAS = 'rsg-components';
  var RSG_COMPONENTS_ALIAS_DEFAULT = "".concat(RSG_COMPONENTS_ALIAS, "-default");
  var webpackAlias = webpackConfig.resolve && webpackConfig.resolve.alias || {}; // vue-styleguidist overridden components

  var sourceSrc = path.resolve(sourceDir, RSG_COMPONENTS_ALIAS);

  require('fs').readdirSync(sourceSrc).forEach(function (component) {
    webpackAlias["".concat(RSG_COMPONENTS_ALIAS, "/").concat(component)] = path.resolve(sourceSrc, component); // plus in order to avoid cirular references, add an extra ref to the defaults
    // so that custom components can reference their defaults

    webpackAlias["".concat(RSG_COMPONENTS_ALIAS_DEFAULT, "/").concat(component)] = webpackAlias["".concat(RSG_COMPONENTS_ALIAS, "/").concat(component)];
  }); // For some components, the alias model is a little more complicated,
  // because we only override a part of the directory


  var custComp = ['slots/UsageTabButton', 'ReactComponent/ReactComponent', 'StyleGuide/StyleGuideRenderer'];
  var customComponents = custComp.reduce(function (acc, comp) {
    acc[comp] = "Vsg".concat(comp);
    return acc;
  }, {});

  if (config.codeSplit) {
    customComponents['Playground/Playground'] = 'PlaygroundAsync/PlaygroundAsync';
  }

  customComponents.Preview = path.join('Preview', config.codeSplit ? 'PreviewAsync' : 'Preview');

  var buildEditorComponentChain = function buildEditorComponentChain(cc) {
    var key = 'Editor'; // avoid codesplitting tiny prism only spli heavy codemirror

    if (config.codeSplit && !config.simpleEditor) {
      cc[key] = 'EditorAsync';
      key = 'EditorStatic';
    } // adapt compiled/raw format neede for precompiled preview


    if (config.codeSplit) {
      cc[key] = 'EditorPrecompiled';
      key = 'EditorString';
    } // add codebutton if asked for


    if (config.copyCodeButton) {
      cc[key] = 'EditorWithToolbar';
      key = 'EditorNoTools';
    } // if the user chose prism, load the prism editor instead of codemirror


    cc[key] = path.join('VsgEditor', config.simpleEditor ? 'EditorPrism' : 'Editor');
  };

  buildEditorComponentChain(customComponents);
  Object.keys(customComponents).forEach(function (key) {
    webpackAlias["".concat(RSG_COMPONENTS_ALIAS, "/").concat(key)] = path.resolve(sourceSrc, customComponents[key]);
    webpackAlias["".concat(RSG_COMPONENTS_ALIAS_DEFAULT, "/").concat(key)] = webpackAlias["".concat(RSG_COMPONENTS_ALIAS, "/").concat(key)];
  }); // Custom style guide components

  if (config.styleguideComponents) {
    (0, _forEach["default"])(config.styleguideComponents, function (filepath, name) {
      var fullName = name.match(RENDERER_REGEXP) ? "".concat(name.replace(RENDERER_REGEXP, ''), "/").concat(name) : name;
      webpackAlias["".concat(RSG_COMPONENTS_ALIAS, "/").concat(fullName)] = filepath;
    });
  } // Add components folder alias at the end so users can override our components to customize the style guide
  // (their aliases should be before this one)


  var resolve = (0, _makeWebpackConfig["default"])(config, env).resolve;

  if (resolve && resolve.alias) {
    webpackAlias[RSG_COMPONENTS_ALIAS] = resolve.alias[RSG_COMPONENTS_ALIAS];
  } // To avoid circular rendering when overriding existing components,
  // Create another alias, not overriden by users


  if (config.styleguideComponents) {
    webpackAlias[RSG_COMPONENTS_ALIAS_DEFAULT] = webpackAlias[RSG_COMPONENTS_ALIAS];
  }

  if (config.dangerouslyUpdateWebpackConfig) {
    webpackConfig = config.dangerouslyUpdateWebpackConfig(webpackConfig, env);
  }

  return webpackConfig;
}