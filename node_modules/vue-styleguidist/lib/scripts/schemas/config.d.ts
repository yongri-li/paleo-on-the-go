/// <reference types="webpack-dev-server" />
import { Configuration } from 'webpack';
import * as Rsg from 'react-styleguidist';
import { StyleguidistConfig } from '../../types/StyleGuide';
declare const _default: {
    assetsDir: {
        uitype: string;
        message: string;
        description: string;
        type: string;
        example: string;
    };
    codeSplit: {
        default: boolean;
        message: string;
        description: string;
        type: string;
    };
    compilerConfig: {
        tstype: string;
        type: string;
        default: {
            objectAssign: string;
        };
    };
    components: {
        tstype: string;
        uitype: string;
        message: string;
        description: string;
        type: string[];
        example: string;
    };
    configDir: {
        uitype: string;
        process: (value: string, config: StyleguidistConfig, rootDir: string) => string;
    };
    context: {
        tstype: string;
        type: string;
        default: {};
        example: {
            map: string;
        };
    };
    contextDependencies: {
        tstype: string;
        type: string;
    };
    configureServer: {
        tstype: string;
        type: string;
    };
    copyCodeButton: {
        type: string;
        message: string;
        description: string;
        default: boolean;
    };
    dangerouslyUpdateWebpackConfig: {
        tstype: string;
        description: string;
        type: string;
    };
    defaultExample: {
        tstype: string;
        uitype: string;
        message: string;
        description: string;
        type: string[];
        default: boolean;
        process: (val: string | boolean) => string | false;
    };
    displayOrigins: {
        type: string;
        message: string;
        description: string;
        default: boolean;
    };
    editorConfig: {
        tstype: string;
        type: string;
        process: (value: any, config: StyleguidistConfig) => any;
    };
    exampleMode: {
        tstype: string;
        message: string;
        description: string;
        list: {
            value: string;
            name: string;
        }[];
        type: string;
        process: (value: string, config: StyleguidistConfig) => string;
        default: string;
    };
    getComponentPathLine: {
        tstype: string;
        type: string;
        default: (componentPath: string) => string;
    };
    getExampleFilename: {
        tstype: string;
        type: string;
        default: (componentPath: string) => string | false;
        example: (componentPath: string) => string;
    };
    highlightTheme: {
        type: string;
        default: string;
        deprecated: string;
    };
    ignore: {
        tstype: string;
        message: string;
        description: string;
        type: string;
        default: string[];
    };
    jssThemedEditor: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    jsxInComponents: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    jsxInExamples: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    locallyRegisterComponents: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    navigation: {
        type: string;
        default: boolean;
        deprecated: string;
    };
    mixins: {
        tstype: string;
        type: string;
        default: never[];
        example: string[];
        deprecated: string;
    };
    logger: {
        tstype: string;
        type: string;
    };
    minimize: {
        type: string;
        default: boolean;
        message: string;
        description: string;
    };
    mountPointId: {
        message: string;
        description: string;
        type: string;
        default: string;
    };
    pagePerSection: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    previewDelay: {
        type: string;
        default: number;
    };
    printBuildInstructions: {
        type: string;
    };
    printServerInstructions: {
        type: string;
    };
    progressBar: {
        message: string;
        type: string;
        default: boolean;
        process: (value: boolean | undefined, config: StyleguidistConfig) => boolean;
    };
    propsParser: {
        tstype: string;
        type: string;
    };
    require: {
        tstype: string;
        type: string;
        default: never[];
        example: string[];
    };
    renderRootJsx: {
        tstype: string;
        type: string;
    };
    ribbon: {
        tstype: string;
        uitype: string;
        message: string;
        description: string;
        type: string;
        example: {
            url: string;
            text: string;
        };
    };
    sections: {
        inherit: boolean;
        type: string;
        default: never[];
        process: (value: Rsg.ConfigSection[] | undefined, config: StyleguidistConfig) => Rsg.ConfigSection[];
        example: ({
            name: string;
            content: string;
            components?: undefined;
        } | {
            name: string;
            components: string;
            content?: undefined;
        })[];
    };
    serverHost: {
        message: string;
        description: string;
        type: string;
        default: string;
    };
    serverPort: {
        tstype: string;
        uitype: string;
        message: string;
        description: string;
        type: string[];
        default: number;
    };
    showCode: {
        type: string;
        default: boolean;
        deprecated: string;
    };
    showUsage: {
        type: string;
        default: boolean;
        deprecated: string;
    };
    showSidebar: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    simpleEditor: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    skipComponentsWithoutExample: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    sortProps: {
        tstype: string;
        type: string;
    };
    styleguideComponents: {
        tstype: string;
        type: string;
    };
    styleguideDir: {
        uitype: string;
        message: string;
        description: string;
        type: string;
        default: string;
    };
    styleguidePublicPath: {
        type: string;
        message: string;
        description: string;
        default: string;
    };
    styles: {
        type: string[];
        tstype: string;
        default: {};
        example: {
            Logo: {
                logo: {
                    fontStyle: string;
                };
            };
        };
    };
    template: {
        type: string[];
        default: {};
        process: (value: any) => any;
    };
    theme: {
        type: string[];
        tstype: string;
        default: {};
        example: {
            link: string;
            linkHover: string;
        };
    };
    title: {
        message: string;
        description: string;
        type: string;
        process: (value?: string | undefined) => string;
        example: string;
    };
    updateDocs: {
        tstype: string;
        type: string;
    };
    updateExample: {
        tstype: string;
        type: string;
        default: (props: Pick<Rsg.CodeExample, "content" | "lang" | "settings">) => Pick<Rsg.CodeExample, "content" | "lang" | "settings">;
    };
    updateWebpackConfig: {
        type: string;
        removed: string;
    };
    usageMode: {
        tstype: string;
        message: string;
        description: string;
        list: {
            value: string;
            name: string;
        }[];
        type: string;
        process: (value: string, config: StyleguidistConfig) => string;
        default: string;
    };
    tocMode: {
        tstype: string;
        message: string;
        description: string;
        list: {
            value: string;
            name: string;
        }[];
        type: string;
        default: string;
    };
    validExtends: {
        message: string;
        type: string;
        tstype: string;
        default: (fullFilePath: string) => boolean;
    };
    verbose: {
        message: string;
        description: string;
        type: string;
        default: boolean;
    };
    version: {
        message: string;
        description: string;
        type: string;
    };
    vuex: {
        type: string;
        deprecated: string;
    };
    webpackConfig: {
        tstype: string;
        type: string[];
        process: (val?: Configuration | undefined) => any;
        example: {
            module: {
                rules: ({
                    test: RegExp;
                    exclude: RegExp;
                    loader: string;
                    options: {};
                    query?: undefined;
                } | {
                    test: RegExp;
                    exclude: RegExp;
                    loader: string;
                    options?: undefined;
                    query?: undefined;
                } | {
                    test: RegExp;
                    loader: string;
                    exclude?: undefined;
                    options?: undefined;
                    query?: undefined;
                } | {
                    exclude: RegExp[];
                    loader: string;
                    query: {
                        limit: number;
                        name: string;
                    };
                    test?: undefined;
                    options?: undefined;
                })[];
            };
        };
    };
};
export default _default;
