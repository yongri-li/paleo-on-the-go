import "core-js/modules/es.symbol";
import "core-js/modules/es.symbol.description";
import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.filter";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.array.map";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.get-own-property-descriptor";
import "core-js/modules/es.object.get-own-property-descriptors";
import "core-js/modules/es.object.keys";
import "core-js/modules/web.dom-collections.for-each";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import Styled from 'rsg-components/Styled';
import Markdown from 'rsg-components/Markdown';
import Argument from 'rsg-components/Argument';
import Arguments from 'rsg-components/Arguments';
import Name from 'rsg-components/Name';
import JsDoc from 'rsg-components/JsDoc';
import Table from 'rsg-components/Table';
import getOriginColumn from 'rsg-components/OriginColumn';
import methodStyles from '../../utils/propStyles';

var getRowKey = function getRowKey(row) {
  return row.name;
};

function renderMethodName(_ref) {
  var name = _ref.name,
      _ref$tags = _ref.tags,
      tags = _ref$tags === void 0 ? {} : _ref$tags;
  return React.createElement(Name, {
    deprecated: !!tags.deprecated
  }, "".concat(name, "()"));
}

function renderDescription(_ref2) {
  var description = _ref2.description,
      returns = _ref2.returns,
      _ref2$tags = _ref2.tags,
      tags = _ref2$tags === void 0 ? {} : _ref2$tags;
  return React.createElement(React.Fragment, null, description && React.createElement(Markdown, {
    text: description
  }), returns && React.createElement("div", null, "Returns:", ' ', React.createElement(Argument, _extends({
    name: ""
  }, returns, {
    description: typeof returns.description === 'boolean' ? '' : returns.description
  }))), React.createElement(JsDoc, tags));
}

function renderParameters(_ref3) {
  var _ref3$params = _ref3.params,
      params = _ref3$params === void 0 ? [] : _ref3$params;
  return React.createElement(Arguments, {
    args: params.map(function (p) {
      return _objectSpread({
        block: true
      }, p, {
        name: p.name || '',
        description: typeof p.description === 'boolean' ? '' : p.description
      });
    })
  });
}

export var columns = function columns(methods, classes) {
  return [{
    caption: 'Method name',
    render: renderMethodName,
    className: classes.name
  }, {
    caption: 'Description',
    render: renderDescription,
    className: classes.description
  }, {
    caption: 'Parameters',
    render: renderParameters
  }].concat(_toConsumableArray(getOriginColumn(methods)));
};
export var MethodsRenderer = function MethodsRenderer(_ref4) {
  var methods = _ref4.methods,
      classes = _ref4.classes;
  return React.createElement(Table, {
    columns: columns(methods, classes),
    rows: methods,
    getRowKey: getRowKey
  });
};
MethodsRenderer.propTypes = {
  classes: PropTypes.objectOf(PropTypes.string.isRequired).isRequired,
  methods: PropTypes.arrayOf(PropTypes.shape({
    name: PropTypes.string.isRequired,
    description: PropTypes.string,
    returns: PropTypes.object,
    params: PropTypes.array,
    tags: PropTypes.object
  }).isRequired).isRequired
};
export default Styled(methodStyles)(MethodsRenderer);