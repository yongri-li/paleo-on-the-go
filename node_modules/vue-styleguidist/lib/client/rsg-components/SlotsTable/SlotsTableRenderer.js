import "core-js/modules/es.symbol";
import "core-js/modules/es.symbol.description";
import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.filter";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.array.map";
import "core-js/modules/es.array.some";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.get-own-property-descriptor";
import "core-js/modules/es.object.get-own-property-descriptors";
import "core-js/modules/es.object.keys";
import "core-js/modules/web.dom-collections.for-each";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* eslint-disable react/prop-types */
import React from 'react';
import PropTypes from 'prop-types';
import map from 'lodash/map';
import Styled from 'rsg-components/Styled';
import Markdown from 'rsg-components/Markdown';
import Name from 'rsg-components/Name';
import Table from 'rsg-components/Table';
import Arguments from 'rsg-components/Arguments';
import getOriginColumn from 'rsg-components/OriginColumn';
import propStyles from '../../utils/propStyles';

function renderDescription(prop) {
  var description = prop.description;
  return React.createElement("div", null, description ? React.createElement(Markdown, {
    text: description
  }) : '-');
}

function renderName(prop) {
  var name = prop.name,
      _prop$tags = prop.tags,
      tags = _prop$tags === void 0 ? {} : _prop$tags;
  return React.createElement(Name, {
    deprecated: !!tags.deprecated
  }, name);
}

export function getRowKey(row) {
  return row.name;
}
export function propsToArray(props) {
  return map(props, function (prop, name) {
    return _objectSpread({}, prop, {
      name: name
    });
  });
}
export function renderBindings(_ref) {
  var bindings = _ref.bindings;
  return bindings && bindings.length ? React.createElement(Arguments, {
    args: bindings.map(function (b) {
      return _objectSpread({
        block: true
      }, b);
    })
  }) : '-';
}
export var columns = function columns(slots, classes) {
  return [{
    caption: 'Slot',
    render: renderName,
    className: classes.name
  }, {
    caption: 'Description',
    render: renderDescription,
    className: classes.description
  }].concat(_toConsumableArray(slots.some(function (s) {
    return s.bindings;
  }) ? [{
    caption: 'Bindings',
    render: renderBindings
  }] : []), _toConsumableArray(getOriginColumn(slots)));
};

function SlotsTableRenderer(_ref2) {
  var slots = _ref2.props,
      classes = _ref2.classes;
  var slotsArray = propsToArray(slots);
  return React.createElement(Table, {
    columns: columns(slotsArray, classes),
    rows: slotsArray,
    getRowKey: getRowKey
  });
}

SlotsTableRenderer.propTypes = {
  props: PropTypes.object.isRequired,
  classes: PropTypes.object.isRequired
};
export default Styled(propStyles)(SlotsTableRenderer);