import "core-js/modules/es.symbol";
import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.filter";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.array.slice";
import "core-js/modules/es.object.get-own-property-descriptor";
import "core-js/modules/es.object.get-own-property-descriptors";
import "core-js/modules/es.object.keys";
import "core-js/modules/es.string.link";
import "core-js/modules/es.string.small";
import "core-js/modules/web.dom-collections.for-each";
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import { isCodeVueSfc } from 'vue-inbrowser-compiler-utils';
import { polyfill } from 'react-lifecycles-compat';
import SimpleEditor from 'react-simple-code-editor';
import { highlight as prismHighlight, languages } from 'prismjs';
import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-markup';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-jsx';
import { space } from 'react-styleguidist/lib/client/styles/theme';
import prismTheme from 'react-styleguidist/lib/client/styles/prismTheme';
import Styled from 'rsg-components/Styled';
import { useStyleGuideContext } from 'rsg-components/Context';
import getScript from '../../../loaders/utils/getScript';

var highlight = function highlight(lang, jsxInExamples) {
  if (lang === 'vsg') {
    return function (code) {
      var scriptCode = getScript(code, jsxInExamples);
      var scriptCodeHighlighted = prismHighlight(scriptCode, languages[jsxInExamples ? 'jsx' : 'js'], lang);

      if (code.length === scriptCode.length) {
        return scriptCodeHighlighted;
      }

      var templateCode = code.slice(scriptCode.length);
      return scriptCodeHighlighted + prismHighlight(templateCode, languages['html'], lang);
    };
  } else {
    var langScheme = languages[lang];
    return function (code) {
      return prismHighlight(code, langScheme, lang);
    };
  }
};

var styles = function styles(_ref) {
  var fontFamily = _ref.fontFamily,
      fontSize = _ref.fontSize,
      color = _ref.color,
      borderRadius = _ref.borderRadius;
  return {
    root: {
      fontFamily: fontFamily.monospace[0],
      fontSize: fontSize.small,
      borderRadius: borderRadius,
      '& textarea': {
        isolate: false,
        transition: 'all ease-in-out .1s',
        // important to override inline styles in react-simple-code-editor
        border: "1px ".concat(color.border, " solid !important"),
        borderRadius: borderRadius
      },
      '& textarea:focus': {
        isolate: false,
        outline: 0,
        borderColor: "".concat(color.link, " !important"),
        boxShadow: [[0, 0, 0, 2, color.focus]]
      }
    },
    jssEditor: _objectSpread({
      background: color.codeBackground
    }, prismTheme({
      color: color
    }))
  };
};

export var UnconfiguredEditor =
/*#__PURE__*/
function (_Component) {
  _inherits(UnconfiguredEditor, _Component);

  function UnconfiguredEditor() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, UnconfiguredEditor);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(UnconfiguredEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      code: _this.props.code,
      prevCode: _this.props.code
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (code) {
      _this.setState({
        code: code
      });

      _this.props.onChange(code);
    });

    return _this;
  }

  _createClass(UnconfiguredEditor, [{
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return nextState.code !== this.state.code;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$classes = this.props.classes,
          root = _this$props$classes.root,
          jssEditor = _this$props$classes.jssEditor;
      var isVueSFC = isCodeVueSfc(this.state.code);
      var _this$props = this.props,
          jssThemedEditor = _this$props.jssThemedEditor,
          jsxInExamples = _this$props.jsxInExamples;
      var langClass = isVueSFC ? 'language-html' : 'language-jsx';
      return React.createElement(SimpleEditor, {
        className: cx(root, jssThemedEditor ? jssEditor : langClass, 'prism-editor'),
        value: this.state.code,
        onValueChange: this.handleChange,
        highlight: highlight(isVueSFC ? 'html' : 'vsg', jsxInExamples) // Padding should be passed via a prop (not CSS) for a proper
        // cursor position calculation
        ,
        padding: space[2] // to make sure the css styles for prism are taken into account
        ,
        preClassName: cx(!jssThemedEditor && langClass)
      });
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var code = nextProps.code;

      if (prevState.prevCode !== code) {
        return {
          prevCode: code,
          code: code
        };
      }

      return null;
    }
  }]);

  return UnconfiguredEditor;
}(Component);

_defineProperty(UnconfiguredEditor, "propTypes", {
  classes: PropTypes.objectOf(PropTypes.string.isRequired).isRequired,
  code: PropTypes.string.isRequired,
  jssThemedEditor: PropTypes.bool.isRequired,
  jsxInExamples: PropTypes.bool.isRequired,
  onChange: PropTypes.func.isRequired
});

var PEditor = polyfill(UnconfiguredEditor);

function Editor(props) {
  var _ref2 = useStyleGuideContext(),
      _ref2$config = _ref2.config,
      jssThemedEditor = _ref2$config.jssThemedEditor,
      jsxInExamples = _ref2$config.jsxInExamples;

  return React.createElement(PEditor, _extends({}, props, {
    jssThemedEditor: jssThemedEditor,
    jsxInExamples: jsxInExamples
  }));
}

export default Styled(styles)(Editor);