import React, { Component } from 'react';
import PropTypes from 'prop-types';
import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-markup';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-jsx';
import { JssInjectedProps } from 'rsg-components/Styled';
export interface UnconfiguredEditorProps extends JssInjectedProps {
    code: string;
    jssThemedEditor: boolean;
    jsxInExamples: boolean;
    onChange: (val: string) => void;
}
export declare class UnconfiguredEditor extends Component<UnconfiguredEditorProps> {
    static propTypes: {
        classes: PropTypes.Validator<{
            [x: string]: string;
        }>;
        code: PropTypes.Validator<string>;
        jssThemedEditor: PropTypes.Validator<boolean>;
        jsxInExamples: PropTypes.Validator<boolean>;
        onChange: PropTypes.Validator<(...args: any[]) => any>;
    };
    state: {
        code: string;
        prevCode: string;
    };
    static getDerivedStateFromProps(nextProps: UnconfiguredEditorProps, prevState: {
        code: string;
        prevCode: string;
    }): {
        prevCode: string;
        code: string;
    } | null;
    shouldComponentUpdate(nextProps: UnconfiguredEditorProps, nextState: {
        code: string;
        prevCode: string;
    }): boolean;
    handleChange: (code: string) => void;
    render(): JSX.Element;
}
declare const _default: React.ComponentType<Pick<Pick<UnconfiguredEditorProps, "code" | "classes" | "onChange">, "code" | "onChange">>;
export default _default;
