import "core-js/modules/es.symbol";
import "core-js/modules/es.array.concat";
import "core-js/modules/es.array.filter";
import "core-js/modules/es.array.for-each";
import "core-js/modules/es.function.name";
import "core-js/modules/es.object.get-own-property-descriptor";
import "core-js/modules/es.object.get-own-property-descriptors";
import "core-js/modules/es.object.keys";
import "core-js/modules/es.object.to-string";
import "core-js/modules/es.promise";
import "core-js/modules/es.regexp.to-string";
import "core-js/modules/web.dom-collections.for-each";
import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Vue from 'vue';
import { addScopedStyle } from 'vue-inbrowser-compiler-utils';
import cleanName from 'vue-docgen-api/dist/utils/cleanName';
import PlaygroundError from 'rsg-components/PlaygroundError';
import Context from 'rsg-components/Context';
import { DocumentedComponentContext } from '../VsgReactComponent/ReactComponent';
import { RenderJsxContext } from '../../utils/renderStyleguide';

var PreviewAsync =
/*#__PURE__*/
function (_Component) {
  _inherits(PreviewAsync, _Component);

  function PreviewAsync() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, PreviewAsync);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PreviewAsync)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "state", {
      error: null
    });

    _defineProperty(_assertThisInitialized(_this), "handleError", function (err) {
      _this.unmountPreview();

      _this.setState({
        error: err.toString()
      });

      console.error(err); // eslint-disable-line no-console
    });

    return _this;
  }

  _createClass(PreviewAsync, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Clear console after hot reload, do not clear on the first load
      // to keep any warnings
      if (this.context.codeRevision > 0) {
        // eslint-disable-next-line no-console
        console.clear();
      }

      if (this.props.code.compiled) {
        this.setCompiledPreview(this.props.code.compiled);
      } else {
        this.executeCode(this.props.code.raw);
      }
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.state.error !== nextState.error || this.props.code !== nextProps.code;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.code.raw !== prevProps.code.raw) {
        this.executeCode(this.props.code.raw);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unmountPreview();
    }
  }, {
    key: "unmountPreview",
    value: function unmountPreview() {
      this.destroyVueInstance();

      if (this.mountNode) {
        var el = this.mountNode.children[0];

        if (!el) {
          this.mountNode.innerHTML = ' ';
          this.mountNode.appendChild(document.createElement('div'));
          el = this.mountNode.children[0];
        }

        el = new Vue({
          el: el,
          data: {},
          template: '<div></div> '
        });
      }
    }
  }, {
    key: "destroyVueInstance",
    value: function destroyVueInstance() {
      if (this.vueInstance) {
        try {
          this.vueInstance.$destroy();
        } catch (err) {// eat the error
        }

        this.vueInstance = null;
      }
    }
  }, {
    key: "executeCode",
    value: function executeCode(newCode) {
      var _this2 = this;

      this.setState({
        error: null
      });
      import(
      /* webpackChunkName: "compiler" */
      'vue-inbrowser-compiler').then(function (_ref) {
        var compile = _ref.compile;

        try {
          var example = compile(newCode, _objectSpread({}, _this2.context.config.compilerConfig, {}, _this2.context.config.jsxInExamples ? {
            jsx: '__pragma__(h)',
            objectAssign: 'concatenate'
          } : {}));

          _this2.setCompiledPreview(example);
        } catch (err) {
          _this2.handleError(err);
        }
      });
    }
  }, {
    key: "setCompiledPreview",
    value: function setCompiledPreview(example) {
      var _this$props = this.props,
          vuex = _this$props.vuex,
          component = _this$props.component,
          renderRootJsx = _this$props.renderRootJsx;
      var style;
      var previewComponent = {};

      try {
        style = example.style;

        if (example.script) {
          // compile and execute the script
          // it can be:
          // - a script setting up variables => we set up the data function of previewComponent
          // - a `new Vue()` script that will return a full config object
          previewComponent = this.props.evalInContext(example.script)() || {};
        }

        if (example.template) {
          // if this is a pure template or if we are in hybrid vsg mode,
          // we need to set the template up.
          previewComponent.template = "<div>".concat(example.template, "</div>");
        }
      } catch (err) {
        this.handleError(err);
        previewComponent.template = '<div/>';
      }

      var el = this.mountNode.children[0];

      if (!el) {
        this.mountNode.innerHTML = ' ';
        this.mountNode.appendChild(document.createElement('div'));
        el = this.mountNode.children[0];
      }

      var extendsComponent = {};

      if (vuex) {
        extendsComponent = {
          store: vuex["default"]
        };
      }

      var moduleId = 'v-' + Math.floor(Math.random() * 1000) + 1;
      previewComponent._scopeId = 'data-' + moduleId; // if we are in local component registration, register current component
      // NOTA: on independent md files, component.module is undefined

      if (component.module && this.context.config.locallyRegisterComponents && // NOTA: if the components member of the vue config object is
      // already set it should not be changed
      !previewComponent.components) {
        component.displayName = cleanName(component.name); // register component locally

        previewComponent.components = _defineProperty({}, component.displayName, component.module["default"] || component.module);

        if (component.props.subComponents) {
          component.props.subComponents.forEach(function (c) {
            c.displayName = cleanName(c.name);
            previewComponent.components[c.displayName] = c.module["default"] || c.module;
          });
        }
      } // then we just have to render the setup previewComponent in the prepared slot


      var rootComponent = renderRootJsx ? renderRootJsx["default"](previewComponent) : {
        render: function render(createElement) {
          return createElement(previewComponent);
        }
      };

      try {
        this.destroyVueInstance();
        this.vueInstance = new Vue(_objectSpread({}, extendsComponent, {}, rootComponent, {
          el: el
        }));
      } catch (err) {
        this.handleError(err);
      } // Add the scoped style if there is any


      if (style) {
        addScopedStyle(style, moduleId);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var error = this.state.error;
      return React.createElement(React.Fragment, null, React.createElement("div", {
        ref: function ref(_ref2) {
          return _this3.mountNode = _ref2;
        }
      }, React.createElement("div", null)), error && React.createElement(PlaygroundError, {
        message: error
      }));
    }
  }]);

  return PreviewAsync;
}(Component);

_defineProperty(PreviewAsync, "propTypes", {
  code: PropTypes.shape({
    raw: PropTypes.string.isRequired,
    compiled: PropTypes.oneOfType([PropTypes.shape({
      script: PropTypes.string,
      template: PropTypes.string,
      style: PropTypes.string
    }), PropTypes.bool])
  }).isRequired,
  evalInContext: PropTypes.func.isRequired,
  vuex: PropTypes.object,
  component: PropTypes.object,
  renderRootJsx: PropTypes.object
});

_defineProperty(PreviewAsync, "contextType", Context);

export default function PreviewWithComponent(props) {
  return React.createElement(RenderJsxContext.Consumer, null, function (renderRootJsx) {
    return React.createElement(DocumentedComponentContext.Consumer, null, function (component) {
      return React.createElement(PreviewAsync, _extends({}, props, {
        component: component,
        renderRootJsx: renderRootJsx
      }));
    });
  });
}