import "core-js/modules/es.function.name";
import React from 'react';
import Type from 'rsg-components/Type';
import Text from 'rsg-components/Text';
import { getType } from './util';

function renderType(type) {
  if (!type) {
    return 'unknown';
  }

  var name = type.name;

  switch (name) {
    case 'arrayOf':
      return "".concat(type.value.name, "[]");

    case 'objectOf':
      return "{".concat(renderType(type.value), "}");

    case 'instanceOf':
      return type.value;

    default:
      return name;
  }
}

function renderFlowType(type) {
  if (!type) {
    return 'unknown';
  }

  var name = type.name,
      raw = type.raw,
      value = type.value;

  switch (name) {
    case 'enum':
      return name;

    case 'literal':
      return value;

    case 'signature':
      return renderComplexType(type.type, raw);

    case 'union':
    case 'tuple':
      return renderComplexType(name, raw);

    default:
      return raw || name;
  }
}

function renderComplexType(name, title) {
  return React.createElement(Text, {
    size: "small",
    underlined: true,
    title: title
  }, React.createElement(Type, null, name));
}

export default function renderTypeBox(prop, classes) {
  return React.createElement(Type, null, React.createElement("pre", null, prop.flowType ? renderFlowType(getType(prop)) : renderType(getType(prop)), prop.required ? React.createElement("span", {
    className: classes.required
  }, " - required") : null));
}